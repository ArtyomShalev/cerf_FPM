import numpy as np
import math


def check_for_inf(num, denom):
    #function checks for +inf or -inf value in numerator or denominator
    if abs(num) == math.inf or abs(denom) == math.inf:
        return True
    else:
        return False

def calculate_rel_error(value, reference):
    # calculating relative errors https://en.wikipedia.org/wiki/Relative_change_and_difference
    num = reference - value
    # denom = max(value, reference)
    denom = value
    if check_for_inf(num, denom):
        return math.nan
    else:
        return abs(num/denom)

def calculate_rel_error(a, b):
    return abs((b-a)/a)

# SG Johnson reference data
# Faddeeva_w_wolfram_refs = [-3.78270245518980507452677445620103199303131110e-7
#                            +1j*0.000903861276433172057331093754199933411710053155,
#                             0.1764906227004816847297495349730234591778719532788
#                            +1j*-0.02146550539468457616788719893991501311573031095617,
#                             0.2410250715772692146133539023007113781272362309451
#                            +1j*0.06087579663428089745895459735240964093522265589350,
#                             0.30474420525691259245713884106959496013413834051768
#                            +1j*-0.20821893820283162728743734725471561394145872072738,
#                             7.317131068972378096865595229600561710140617977e34
#                            +1j*8.321873499714402777186848353320412813066170427e34,
#                             0.0615698507236323685519612934241429530190806818395
#                            +1j*-0.00676005783716575013073036218018565206070072304635,
#                             0.3960793007699874918961319170187598400134746631
#                            +1j*-5.593152259116644920546186222529802777409274656e-9,
#                             0.08217199226739447943295069917990417630675021771804
#                            +1j*-0.04701291087643609891018366143118110965272615832184,
#                             0.00457246000350281640952328010227885008541748668738
#                            +1j*-0.00804900791411691821818731763401840373998654987934,
#                             0.8746342859608052666092782112565360755791467973338452+1j*0.,
#                             0.00468190164965444174367477874864366058339647648741
#                            +1j*0.0510735563901306197993676329845149741675029197050,
#                             -0.0023193175200187620902125853834909543869428763219
#                            +1j*-0.025460054739731556004902057663500272721780776336,
#                             9.11463368405637174660562096516414499772662584e304
#                            +1j*3.97101807145263333769664875189354358563218932e305,
#                             -4.4927207857715598976165541011143706155432296e281
#                            +1j*-2.8019591213423077494444700357168707775769028e281,
#                             2.820947917809305132678577516325951485807107151e-6
#                            +1j*2.820947917668257736791638444590253942253354058e-6,
#                             2.82094791773878143474039725787438662716372268e-15
#                            +1j*2.82094791773878143474039725773333923127678361e-15,
#                             -0.0000563851289696244350147899376081488003110150498
#                            +1j*-0.000169211755126812174631861529808288295454992688,
#                             -5.586035480670854326218608431294778077663867e-162
#                            +1j*5.586035480670854326218608431294778077663867e-161,
#                             0.00016318325137140451888255634399123461580248456
#                            +1j*-0.095232456573009287370728788146686162555021209999,
#                             0.69504753678406939989115375989939096800793577783885
#                            +1j*-1.8916411171103639136680830887017670616339912024317,
#                             0.0001242418269653279656612334210746733213167234822
#                            +1j*7.145975826320186888508563111992099992116786763e-7,
#                             2.318587329648353318615800865959225429377529825e-8
#                            +1j*6.182899545728857485721417893323317843200933380e-8,
#                             -0.0133426877243506022053521927604277115767311800303
#                            +1j*-0.0148087097143220769493341484176979826888871576145,
#                             1.00000000000000012412170838050638522857747934
#                            +1j*1.12837916709551279389615890312156495593616433e-16,
#                             0.9999999853310704677583504063775310832036830015
#                            +1j*2.595272024519678881897196435157270184030360773e-8,
#                             -1.4731421795638279504242963027196663601154624e-15
#                            +1j*0.090727659684127365236479098488823462473074709,
#                             5.79246077884410284575834156425396800754409308e-18
#                            +1j*0.0907276596841273652364790985059772809093822374,
#                             0.0884658993528521953466533278764830881245144368
#                            +1j*1.37088352495749125283269718778582613192166760e-22,
#                             0.0345480845419190424370085249304184266813447878
#                            +1j*2.11161102895179044968099038990446187626075258e-23,
#                             6.63967719958073440070225527042829242391918213e-36
#                            +1j*0.0630820900592582863713653132559743161572639353,
#                             0.00179435233208702644891092397579091030658500743634
#                            +1j*0.0951983814805270647939647438459699953990788064762,
#                             9.09760377102097999924241322094863528771095448e-13
#                            +1j*0.0709979210725138550986782242355007611074966717,
#                             7.2049510279742166460047102593255688682910274423e-304
#                            +1j*0.0201552956479526953866611812593266285000876784321,
#                             3.04543604652250734193622967873276113872279682e-44
#                            +1j*0.0566481651760675042930042117726713294607499165,
#                             3.04543604652250734193622967873276113872279682e-44
#                            +1j*0.0566481651760675042930042117726713294607499165,
#                             0.5659928732065273429286988428080855057102069081e-12
#                            +1j*0.056648165176067504292998527162143030538756683302,
#                             -0.56599287320652734292869884280802459698927645e-12
#                            +1j*0.0566481651760675042929985271621430305387566833029,
#                             0.0796884251721652215687859778119964009569455462
#                            +1j*1.11474461817561675017794941973556302717225126e-22,
#                             0.07817195821247357458545539935996687005781943386550
#                            +1j*-0.01093913670103576690766705513142246633056714279654,
#                             0.04670032980990449912809326141164730850466208439937
#                            +1j*0.03944038961933534137558064191650437353429669886545,
#                             0.36787944117144232159552377016146086744581113103176
#                            +1j*0.60715770584139372911503823580074492116122092866515,
#                             0+1j*0.010259688805536830986089913987516716056946786526145,
#                            0.99004983374916805357390597718003655777207908125383
#                            +1j*-0.11208866436449538036721343053869621153527769495574,
#                             0.99999999999999999999999999999999999999990000
#                            +1j*1.12837916709551257389615890312154517168802603e-20,
#                             0.999999999999943581041645226871305192054749891144158+1j*0.0,
#                             0.0110604154853277201542582159216317923453996211744250+1j*0.0
# ]

ref_rp = np.loadtxt('data/ref_rp.txt')
ref_ip = np.loadtxt('data/ref_ip.txt')

# ref_rp, ref_ip = [], []
# for z in Faddeeva_w_wolfram_refs:
#     ref_rp.append(z.real)
#     ref_ip.append(z.imag)
# ref_rp = np.array(ref_rp)
# ref_ip = np.array(ref_ip)

py_rp = np.loadtxt('data/py_rp.txt')
py_ip = np.loadtxt('data/py_ip.txt')

scipy_rp = np.loadtxt('data/scipy_rp.txt')
scipy_ip = np.loadtxt('data/scipy_ip.txt')

m_rp = np.loadtxt('data/m_rp.txt')
m_ip = np.loadtxt('data/m_ip.txt')

fortran_rp = np.loadtxt('data/fortran_rp.txt')
fortran_ip = np.loadtxt('data/fortran_ip.txt')

MIT_rp = np.loadtxt('data/MIT_rp.txt')
MIT_ip = np.loadtxt('data/MIT_ip.txt')

py_rp_err, py_ip_err = [], []
scipy_rp_err, scipy_ip_err = [], []
m_rp_err, m_ip_err = [], []
fortran_rp_err, fortran_ip_err = [], []
MIT_rp_err, MIT_ip_err = [], []
for i in range(len(ref_rp)):
    py_rp_err.append(calculate_rel_error(py_rp[i], ref_rp[i]))
    py_ip_err.append(calculate_rel_error(py_ip[i], ref_ip[i]))

    scipy_rp_err.append(calculate_rel_error(scipy_rp[i], ref_rp[i]))
    scipy_ip_err.append(calculate_rel_error(scipy_ip[i], ref_ip[i]))

    m_rp_err.append(calculate_rel_error(m_rp[i], ref_rp[i]))
    m_ip_err.append(calculate_rel_error(m_ip[i], ref_ip[i]))

    fortran_rp_err.append(calculate_rel_error(fortran_rp[i], ref_rp[i]))
    fortran_ip_err.append(calculate_rel_error(fortran_ip[i], ref_ip[i]))

    MIT_rp_err.append(calculate_rel_error(MIT_rp[i], ref_rp[i]))
    MIT_ip_err.append(calculate_rel_error(MIT_ip[i], ref_ip[i]))

np.savetxt('data/py_rp_err.txt', py_rp_err)
np.savetxt('data/py_ip_err.txt', py_ip_err)

np.savetxt('data/scipy_rp_err.txt', scipy_rp_err)
np.savetxt('data/scipy_ip_err.txt', scipy_ip_err)

np.savetxt('data/m_rp_err.txt', m_rp_err)
np.savetxt('data/m_ip_err.txt', m_ip_err)

np.savetxt('data/fortran_rp_err.txt', fortran_rp_err)
np.savetxt('data/fortran_ip_err.txt', fortran_ip_err)

np.savetxt('data/MIT_rp_err.txt', MIT_rp_err)
np.savetxt('data/MIT_ip_err.txt', MIT_ip_err)
